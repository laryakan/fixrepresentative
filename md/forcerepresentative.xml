<?xml version="1.0" encoding="utf-8"?>
<!-- FORCE REPRESENTATIVE SCRIPT for Fix Representative mod by Laryakan, May 2025 -->
<!-- Github : https://github.com/laryakan/fixrepresentative -->
<!-- Nexus : https://www.nexusmods.com/x4foundations/mods/1702 -->
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd" name="ForceRepresentative">
	<cues>
		<cue name="ForceRepresentative_Start" instantiate="true" namespace="this" >
			<conditions>
				<check_any>
					<!-- CHECK 1 TIME AT START -->
					<event_cue_signalled cue="md.Setup.Start" />
					<!-- CHECK 1 TIME AT GAMELOAD -->
					<!-- the script should run when loading a save because of md.Setup.Start, check it up -->
					<!-- <event_cue_signalled cue="md.Setup.GameLoaded" /> -->
				</check_any>
			</conditions>
			<delay exact="10s" />
			<actions>
				<show_notification text="'Dispatching the Missing Representative Task Force, aka MRTF...'"/>
				<!-- Iterate over all registered factions -->
				<do_for_each name="$Faction" in="md.$FactionData">
					<debug_text text="'ForceRepresentative - Interate on : ' + $Faction" />
					<do_if value="$Faction == faction.xenon">
						<!-- DO NOT TRY TO MAKE A XENON REPRESENTATIVE -->
						<continue />
					</do_if> 
					<signal_cue_instantly cue="check_store" param="$Faction" />
				</do_for_each>
				<reset_cue cue="this" />
			</actions>
			<cues>
				<!-- ===== DATA TRANSFER OBJECT (DTO) CUE, TO STORE ALL NEEDED EXTENDED SCOPE VARIABLE WITHOUT SIDE EFFECTS ===== -->
				<!-- GENERIC DTO -  -->
				<cue name="check_store" instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<actions>
						<set_value name="$Faction" exact="event.param" />
						<debug_text text="'ForceRepresentative - Received an instruction to check representative for : ' + $Faction" />

						<!-- Check if we need to do something - list of condition to make sure that a representative is present somewhere -->
						<!-- in Vanilla, every active faction needs and HQ with a representative (as Vanilla factionlogic says) -->
						<!-- and in our case, we will only take care of things if the representative do not exists -->
						<do_if value="$Faction.isactive and not $Faction.representative.exists">
							<!-- Rep Missing -->
							<show_notification text="'MRTF SITREP: ' + $Faction.name + ' representative missing'"/>
							<debug_text text="'ForceRepresentative - ' + $Faction.name + ' check'" />
							<set_value name="$SearchSpace" exact="player.galaxy" />
							<!-- this cue namespace will serve to store every variable we need to export in child cue -->
							<signal_cue_instantly cue="spawn" param="namespace" />
						</do_if>
						<do_else>
							<!-- if representative already exists, we do nothing -->
							<debug_text text="'ForceRepresentative - ' + $Faction.name + ' representative already exists or faction is not active'" />
						</do_else>
						
						<!-- reset listener after this instance is destroyed -->
						<reset_cue cue="this" />
					</actions>
				</cue>

				<!-- ====================== LOGICAL CODE, MUST ME CALLED FROM A "DTO" CUE ABOVE ====================== -->
				<!-- force spawn representative, need to instanciate to trigger the cue everytime its called -->
				<cue name="spawn" instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<actions>
						<!-- extend scope to parent namespace (frf or other faction diminitive) -->
						<set_value name="$Super" exact="event.param" />
						<!-- get the $Faction value from the calling cue or lib -->
						<set_value name="$Faction" exact="$Super.$Faction" />
						<!-- get the $SearchSpace value from the calling cue or lib -->
						<set_value name="$SearchSpace" exact="$Super.$SearchSpace" />
						<!-- get the $FactionLogic value from the calling cue or lib -->
						<!-- <set_value name="$FactionLogic" exact="$Super.$FactionLogic" /> -->
							
						<debug_text text="'ForceRepresentative - ' + $Faction.name + ' representative missing, trying to relocate HQ'" />
						<!-- Trying to find new HQ with the game methods, do not work ATM @todo : find a way to access library methods -->
						<!-- <signal_cue_instantly cue="$FactionLogic.RelocateHQ" /> -->
						<!-- <signal_cue_instantly cue="$FactionLogic.CreateNewFactionRepresentative" /> -->
						
						<!-- Recheck, if the game has detected the missing Representative -->
						<do_if value="not $Faction.representative.exists">
							<debug_text text="'ForceRepresentative - ' + $Faction.name + ' forced HQ reset didnt solved the problem'" />
							<!-- if representative still do not exists, we change the HQ no matter what -->
							<!-- <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" /> -->
							
							<find_station name="$Super.$HQ" space="$SearchSpace" owner="$Faction"/>
							<do_if value="$Super.$HQ and $Super.$HQ.isoperational">
								<!-- setting up the new HQ, extending data scope -->
								<set_value name="md.$FactionData.{$Faction}.$Headquarters" exact="$Super.$HQ" />
								<!-- and then we create the representative -->
								<create_representative_actor name="$Super.$Representative" station="$Super.$HQ" faction="$Faction" />
								<!-- create room and place npc, pass super to store global variable un super -->
								<signal_cue_instantly cue="make_room" param="$Super.namespace" />
								<reset_cue cue="make_room" />
								<!-- extending data scope -->
								<set_value name="md.$FactionData.{$Faction}.$Representative" exact="$Super.$Representative" />
								<!-- notify the game that we have placed a new representative (for the conversation handler to be able to handle conversation with the player) -->
								<!--  , do not work ATM @todo : find a way to access library methods -->
								<!-- <signal_cue_instantly cue="md.NPC_FactionRepresentative.Handler_FactionRepresentative.FactionRepresentativeCreated" param="$Representative" check="false" /> -->
							</do_if>
							<do_else>
								<!-- we didnt find any eligible station -->
								<debug_text text="'ForceRepresentative - ' + $Faction.name + ' representative cant find HQ'"  filter="error" />
							</do_else>
						</do_if>
						<!-- Last check if representative exists and have a roomm where we can find hem -->
						<do_if value="not $Faction.representative.exists" >
							<show_notification text="'MRTF SITREP: ' + $Faction.name + ' representative unreachable'" />
							<debug_text text="'ForceRepresentative - Cant spawn ' + $Faction.name + '  Representative'"  filter="error" />
						</do_if>
						<do_else>
							<!-- we made the representative (re)spawned -->
							<show_notification text="'MRTF SITREP: ' + $Faction.name + ' representative recovered'"/>
							<debug_text text="'ForceRepresentative - ' + $Faction.name + ' representative spawned'" />
						</do_else>

						<!-- reset listener after this instance is destroyed -->
						<reset_cue cue="this" />
					</actions>
				</cue>
				
				<!-- create a room on designated station for representative, need to instanciate to trigger the cue everytime its called -->
				<cue name="make_room"  instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<actions>
						<!-- extend scope to parent namespace (spawn.super) -->
						<set_value name="$Super" exact="event.param" />
						<!-- get the $Faction value from the calling cue -->
						<set_value name="$Faction" exact="$Super.$Faction" />
						<!-- get the $HQ value from the calling cue -->
						<set_value name="$HQ" exact="$Super.$HQ" />
						<!-- get the $Representative value from the calling cue -->
						<set_value name="$Representative" exact="$Super.$Representative" />
						
						<debug_text text="'ForceRepresentative - Create room for ' + $Faction.name + '  Representative'" />
						<!-- In most case, if the representative wasnt in the universe, he doesnt have any room to sit, this script (almost Vanilla) will make a romm on designated station -->
						<set_value name="$Race" exact="$HQ.owner.primaryrace" />
						<set_value name="$InteriorSeed" exact="$HQ.seed + lookup.roomtype.list.indexof.{roomtype.factionrep}"/>

						<!-- Logical --> 
						<get_room_definition macro="$CorridorMacro" race="$Race" tags="tag.administrationcorridor" seed="$InteriorSeed" />
						<do_if value="not $CorridorMacro">
							<get_room_definition macro="$CorridorMacro" race="$Race" tags="tag.corridor" seed="$InteriorSeed" />
						</do_if>
						<get_room_definition macro="$RoomMacro" doors="$RoomDoors" race="$Race" tags="tag.factionrep" seed="$InteriorSeed" />
						<!-- Create room -->
						<substitute_text text="$InteriorName" source="readtext.{30003}.{10004}">
							<replace string="'$FACTION$'" with="$Faction.name" />
						</substitute_text>
						<create_dynamic_interior object="$HQ" corridor="$CorridorMacro" room="$RoomMacro" name="$InteriorName" interiorname="$Interior" corridorname="$Corridor" roomname="$Room" roomtype="roomtype.factionrep" seed="$InteriorSeed" />
						<do_if value="$Interior and $Corridor and $Room">
							<!-- Create room -->
							<debug_text text="'ForceRepresentative - Interior for ' + $Representative.name + ' created'" />
							<find_npc_slot name="$NPCSlot" object="$Room" tags="tag.control"/>
							<do_if value="not $NPCSlot">
								<find_npc_slot name="$NPCSlot" object="$Room" />
							</do_if>
							<do_if value="$NPCSlot">
								<!-- Place faction representative -->
								<add_actor_to_room actor="$Representative" slot="$NPCSlot" />
								<debug_text text="'ForceRepresentative - Representative ' + $Representative.name + ' added to room ' + $Room + ' (' + $RoomMacro + ')'" />
							</do_if>
							<do_else>
								<debug_text text="'ForceRepresentative - Could not find slot for ' + $Representative.name + ' ({' + $Representative + '}) in ' + $Room + '(' + $RoomMacro + ')'" filter="error" />
							</do_else>
						</do_if>
						<do_else>
							<debug_text text="'ForceRepresentative - Interior for ' + $Representative.name + ' could not be created using $CorridorMacro: ' + $CorridorMacro + ' and $RoomMacro: ' + $RoomMacro" filter="error" />
						</do_else>
						
						<!-- reset listener after this instance is destroyed -->
						<reset_cue cue="this" />
					</actions>
				</cue>
			</cues>
		</cue>
	</cues>
</mdscript>